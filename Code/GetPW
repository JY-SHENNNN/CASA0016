#define Button 8
#define LED 7
#define S0 6
#define S1 5
#define S2 4
#define S3 3
#define sensorOut 2

int blueSamp = 0;
int redSamp = 0;
int greenSamp = 0;

void setup() {
  // Set S0 - S3 as outputs
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  pinMode(LED, OUTPUT);
  pinMode(Button, INPUT);

  // Set Pulse Width scaling to 20%
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);
  digitalWrite(LED, HIGH);

  // Set Sensor output as input
  pinMode(sensorOut, INPUT);

  // Setup Serial Monitor
  Serial.begin(9600);
}

void loop() {
  // Update min/max frequencies

  // Read Blue Pulse Width
  blueSamp = getBluePW();
  delay(200);
  redSamp = getRedPW();
  delay(200);
  greenSamp = getGreenPW();
  delay(200);
  
  Serial.print("red:");
  Serial.print(redSamp);
  Serial.print(" - green:");
  Serial.print(greenSamp);
  Serial.print(" - blue:");
  Serial.println(blueSamp);

  delay(3000);  // Delay to print the values at intervals
}

// Function to read Red Pulse Widths and return the mapped value
int getRedPW() {
  digitalWrite(S2, LOW); //allow red pulse pass
  digitalWrite(S3, LOW);
  int PW = pulseIn(sensorOut, LOW);   // read the pulse low time, returned in us
  return PW;
}

// Function to read Green Pulse Widths and return the mapped value
int getGreenPW() {
  digitalWrite(S2, HIGH); //allow green pulse pass
  digitalWrite(S3, HIGH);
  int PW = pulseIn(sensorOut, LOW);   // read the pulse low time, returned in us
  return PW;
}

// Function to read Blue Pulse Widths and return the mapped value
int getBluePW() {
  digitalWrite(S2, LOW);  //allow blue pulse pass
  digitalWrite(S3, HIGH);
  int PW = pulseIn(sensorOut, LOW);   // read the pulse low time, returned in us
  return PW;
}

