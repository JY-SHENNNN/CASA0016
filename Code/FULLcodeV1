#include <Adafruit_NeoPixel.h>
#define PIN 7
#define NUMPIXELS 8
const int buttonPin = 8; // 按钮连接到引脚 8
int s0 = 3, s1 = 4, s2 = 5, s3 = 6;
int LED = 9;
int sensorOut = 2; // 假设传感器的输出引脚为 2

int lastButtonState = HIGH; // 上一次的按钮状态（初始化为未按下）
int buttonState;            // 当前按钮状态
unsigned long lastPressTime = 0; // 上一次按钮按下的时间
int pressCount = 0;         // 按下次数

int redPW = 0, greenPW = 0, bluePW = 0;  // 存储RGB颜色的脉冲宽度
int redTest = 0, greenTest = 0, blueTest = 0;

bool valueDone = false;
bool detectionComplete = false; // 标记是否完成检测
bool sensorEnabled = false; // 标记传感器是否启用

Adafruit_NeoPixel pixels(NUMPIXELS, PIN);
void setup() {
    pixels.setBrightness(10);
    pinMode(buttonPin, INPUT_PULLUP); // 设置按钮为输入并启用上拉电阻
    pinMode(s0, OUTPUT);
    pinMode(s1, OUTPUT);
    pinMode(s2, OUTPUT);
    pinMode(s3, OUTPUT);
    pinMode(LED, OUTPUT);
    pinMode(sensorOut, INPUT); // 传感器输出引脚


    pixels.begin();
    pixels.clear();       // 清除所有灯光设置
    pixels.show();        // 将状态应用到灯珠，确保所有灯都关闭

    digitalWrite(s0, HIGH);
    digitalWrite(s1, HIGH); 

    attachInterrupt(digitalPinToInterrupt(sensorOut), disableSensor, FALLING);

  // 初始化时禁用传感器
    disableSensor();
    Serial.begin(9600);              // 初始化串口
}

void loop() {
    buttonState = digitalRead(buttonPin); // 读取按钮状态
    // 检测按钮从未按下到按下的变化
    if (lastButtonState == HIGH && buttonState == LOW) {
        unsigned long currentTime = millis();

        // 检查是否在双击时间窗口内
        if (currentTime - lastPressTime > 0) {
            pressCount++;
            enableSensor(); // 按钮按下时启用传感器
            redPW = getRedPW();
            greenPW = getGreenPW();
            bluePW = getBluePW(); // 执行一次完整的颜色检测
            for (int i = 0; i <= 3; i++) {
              pixels.setPixelColor(i, 0, 255, 0);
              pixels.show();
            }
            delay(200);
            Serial.print("Red Pulse Width  = ");
            Serial.println(redPW);
            if (pressCount == 2) {
                Serial.println("Double press detected!");
                redTest = getRedPW();
                greenTest = getGreenPW();
                blueTest = getBluePW();
                for (int i = 4; i <= 8; i++) {
                  pixels.setPixelColor(i, 0, 255, 0);
                  pixels.show();
                }
                delay(200);
                pixels.clear();       // 清除所有灯光设置
                pixels.show();        // 将状态应用到灯珠，确保所有灯都关闭
                calculateDeltaE();
                detectionComplete = true; // 标记检测完成
                valueDone = true;
                Serial.print("Red test Pulse Width  = ");
                Serial.println(redTest);
                pressCount = 0; // 重置计数器
            }
        } else{
          Serial.println("please press the button agagin");
        }

        lastPressTime = currentTime; // 更新最后按下时间
    }

    if (detectionComplete && valueDone){
      disableSensor(); // 禁用传感器
    }

    lastButtonState = buttonState; // 更新按钮状态
    delay(100);
}

void calculateDeltaE() {
  // 使用简单公式计算 Delta E
  float deltaE = sqrt(pow(redTest - redPW, 2) +
                      pow(greenTest - greenPW, 2) +
                      pow(blueTest - bluePW, 2));

  Serial.print("Delta E: ");
  Serial.println(deltaE);

  // 通过显示不同颜色来指示 Delta E
  if (deltaE < 10) {
    for (int i = 2; i <= 8; i++) {
      pixels.setPixelColor(i, 0, 0, 255);
      pixels.show();
    }
  } else{
    for (int i = 2; i <= 8; i++) {
      pixels.setPixelColor(i, 255, 0, 0);
      pixels.show();
    }
  }
  pixels.show();
  delay(1000);
}

// 启用传感器
void enableSensor() {
  if (!sensorEnabled) {
    sensorEnabled = true; // 启用传感器
    detectionComplete = false; // 重置检测完成标记
    valueDone = false;
    Serial.println("Sensor Enabled.");
  }
}

// 禁用传感器
void disableSensor() {
  sensorEnabled = false; // 禁用传感器
  detachInterrupt(digitalPinToInterrupt(sensorOut)); // 停止中断
  Serial.println("Sensor Disabled.");
}

// 获取红色的脉冲宽度
int getRedPW() {
  digitalWrite(s2, LOW); // 允许红色脉冲通过
  digitalWrite(s3, LOW);
  int PW = pulseIn(sensorOut, LOW);   // 读取低电平脉冲宽度，单位为微秒
  return PW;
}

// 获取绿色的脉冲宽度
int getGreenPW() {
  digitalWrite(s2, HIGH); // 允许绿色脉冲通过
  digitalWrite(s3, HIGH);
  int PW = pulseIn(sensorOut, LOW);   // 读取低电平脉冲宽度，单位为微秒
  return PW;
}

// 获取蓝色的脉冲宽度
int getBluePW() {
  digitalWrite(s2, LOW);  // 允许蓝色脉冲通过
  digitalWrite(s3, HIGH);
  int PW = pulseIn(sensorOut, LOW);   // 读取低电平脉冲宽度，单位为微秒
  return PW;
}
