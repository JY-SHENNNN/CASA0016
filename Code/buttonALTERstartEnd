#include <Adafruit_NeoPixel.h>

#define PIN 9
#define NUMPIXELS 8
#define button 8 
#define LED 7
#define S0 2
#define S1 3
#define S2 4
#define S3 5
#define sensorOut 6
Adafruit_NeoPixel pixels(NUMPIXELS, PIN);

int blueSamp = 0;
int redSamp = 0;
int greenSamp = 0;
bool buttonPressed = false;
int ledState = LOW; // 初始状态LED关闭
int lastButtonState = LOW;  // store the previous button state
int currentButtonState;      // store the current previous state

void setup() {
  pinMode(button, INPUT_PULLUP); 
  pinMode(LED, OUTPUT);
  // Set S0 - S3 as outputs
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
   // Set Sensor output as input
  pinMode(sensorOut, INPUT);

    // Set Pulse Width scaling to 20%
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);
  digitalWrite(LED, LOW);

  pixels.begin();
  pixels.clear();       // 清除所有灯光设置
  pixels.show();        // 将状态应用到灯珠，确保所有灯都关闭
  Serial.begin(9600);
}

void loop() {

  ButtonPressed();
  // Read Blue Pulse Width
  if(digitalRead(LED) == HIGH){
    Serial.print("start");
  //   blueSamp = getBluePW();
  //   delay(200); 
  //   redSamp = getRedPW();
  //   delay(200);
  //   greenSamp = getGreenPW();
  //   delay(200);
  //   for(int i=0; i<4; i++) {
  //   pixels.setPixelColor(i, 150, 0, 0);
  //   pixels.show();
  //   // Serial.print("red:");
  //   // Serial.print(redSamp);
  //   // Serial.print(" - green:");
  //   // Serial.print(greenSamp);
  //   // Serial.print(" - blue:");
  //   // Serial.println(blueSamp);
    
  //   delay(500);
  //   }
  }else{
    Serial.println("end");
  }
}


void ButtonPressed(){
  currentButtonState = digitalRead(button);
  
  // once the button state from low to high, the button pressed
  // if (lastButtonState == LOW && currentButtonState == HIGH) {
  //   //Serial.println("Button Pressed!");  // detect button pressed
  //   digitalWrite(LED, HIGH);
  //   delay(100);
  // }
 
if (lastButtonState == LOW && currentButtonState == HIGH) {
    // 切换 LED 状态
    if (!buttonPressed) {
      ledState = HIGH;  // 第一次按下，LED 常亮
      buttonPressed = true;  // 设置为已按下，防止重复触发
    } else {
      ledState = LOW;  // 第二次按下，LED 长灭
      buttonPressed = false;  // 重置为未按下状态，准备下一次切换
    }

    digitalWrite(LED, buttonPressed); // 更新 LED 状态
    //Serial.print("LED状态: ");
    //Serial.println(buttonPressed == HIGH ? "打开" : "关闭");
    delay(200); // 防止抖动
  }

  // assign the currernt value as previous value
  lastButtonState = currentButtonState;
}

// Function to read Red Pulse Widths and return the mapped value
int getRedPW() {
  digitalWrite(S2, LOW); //allow red pulse pass
  digitalWrite(S3, LOW);
  int PW = pulseIn(sensorOut, LOW);   // read the pulse low time, returned in us
  return PW;
}

// Function to read Green Pulse Widths and return the mapped value
int getGreenPW() {
  digitalWrite(S2, HIGH); //allow green pulse pass
  digitalWrite(S3, HIGH);
  int PW = pulseIn(sensorOut, LOW);   // read the pulse low time, returned in us
  return PW;
}

// Function to read Blue Pulse Widths and return the mapped value
int getBluePW() {
  digitalWrite(S2, LOW);  //allow blue pulse pass
  digitalWrite(S3, HIGH);
  int PW = pulseIn(sensorOut, LOW);   // read the pulse low time, returned in us
  return PW;
}
